From 400eee570ee764ed5ed3dfc72d2fcad509540d44 Mon Sep 17 00:00:00 2001
From: Tobias Fischer <info@tobiasfischer.info>
Date: Fri, 20 Jan 2023 16:08:11 +1000
Subject: [PATCH] Update CMakeLists.txt

---
 nodelet/CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/nodelet/CMakeLists.txt b/nodelet/CMakeLists.txt
index e2ead2c..d98960a 100644
--- a/nodelet/CMakeLists.txt
+++ b/nodelet/CMakeLists.txt
@@ -26,7 +26,7 @@ list(GET nodelet_VERSION_LIST 2 nodelet_VERSION_PATCH)
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/nodelet/version.h.in ${CATKIN_DEVEL_PREFIX}/${CATKIN_GLOBAL_INCLUDE_DESTINATION}/nodelet/version.h)
 
 ## Find Boost (only headers)
-find_package(Boost REQUIRED)
+find_package(Boost COMPONENTS thread system chrono REQUIRED)
 
 ## Find UUID libraries
 find_package(UUID REQUIRED)
diff --git a/nodelet/src/callback_queue_manager.cpp b/nodelet/src/callback_queue_manager.cpp
index bf5dcea4..c2976ab3 100644
--- a/nodelet/src/callback_queue_manager.cpp
+++ b/nodelet/src/callback_queue_manager.cpp
@@ -34,7 +34,7 @@
 #include <boost/thread/thread.hpp>
 #include <boost/thread/condition_variable.hpp>
 #include <boost/type_traits/alignment_of.hpp>
-#include <boost/bind.hpp>
+#include <boost/bind/bind.hpp>
 
 #include <ros/assert.h>
 
diff --git a/nodelet/src/loader.cpp b/nodelet/src/loader.cpp
index 8887d46b..6446cbf9 100644
--- a/nodelet/src/loader.cpp
+++ b/nodelet/src/loader.cpp
@@ -216,7 +216,7 @@ struct Loader::Impl
     typedef pluginlib::ClassLoader<Nodelet> Loader;
     boost::shared_ptr<Loader> loader(new Loader("nodelet", "nodelet::Nodelet"));
     // create_instance_ is self-contained; it owns a copy of the loader shared_ptr
-    create_instance_ = boost::bind(&Loader::createInstance, loader, _1);
+    create_instance_ = boost::bind(&Loader::createInstance, loader, boost::placeholders::_1);
     refresh_classes_ = boost::bind(&Loader::refreshDeclaredClasses, loader);
   }
 
diff --git a/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_demux.h b/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_demux.h
index ec9953ea..a7565fc1 100644
--- a/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_demux.h
+++ b/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_demux.h
@@ -58,7 +58,7 @@ namespace nodelet
         onInit ()
       {
         private_nh_ = getPrivateNodeHandle ();
-        sub_input_.subscribe (private_nh_, "input", 1, bind (&NodeletDEMUX<T,Subscriber>::input_callback, this, _1));
+        sub_input_.subscribe (private_nh_, "input", 1, bind (&NodeletDEMUX<T,Subscriber>::input_callback, this, boost::placeholders::_1));
 
         if (!private_nh_.getParam ("output_topics", output_topics_))
         {
diff --git a/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_lazy.h b/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_lazy.h
index fccd942e..1ecb51b1 100644
--- a/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_lazy.h
+++ b/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_lazy.h
@@ -221,9 +221,9 @@ class NodeletLazy: public nodelet::Nodelet
   {
     boost::mutex::scoped_lock lock(connection_mutex_);
     ros::SubscriberStatusCallback connect_cb
-      = boost::bind(&NodeletLazy::connectionCallback, this, _1);
+      = boost::bind(&NodeletLazy::connectionCallback, this, boost::placeholders::_1);
     ros::SubscriberStatusCallback disconnect_cb
-      = boost::bind(&NodeletLazy::connectionCallback, this, _1);
+      = boost::bind(&NodeletLazy::connectionCallback, this, boost::placeholders::_1);
     ros::Publisher pub = nh.advertise<T>(topic, queue_size,
                                           connect_cb,
                                           disconnect_cb,
diff --git a/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_mux.h b/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_mux.h
index 9fbc5145..957e4e43 100644
--- a/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_mux.h
+++ b/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_mux.h
@@ -104,7 +104,7 @@ namespace nodelet
             }
 
             // Subscribe to 1 callback to fill in the passthrough
-            filters_[0]->registerCallback (boost::bind (&NodeletMUX<T,Filter>::filter_cb, this, _1));
+            filters_[0]->registerCallback (boost::bind (&NodeletMUX<T,Filter>::filter_cb, this, boost::placeholders::_1));
 
             ts_.reset (new message_filters::TimeSynchronizer<T,T,T,T,T,T,T,T> (maximum_queue_size_));
 
@@ -160,7 +160,7 @@ namespace nodelet
           }
         }
 
-        ts_->registerCallback (boost::bind (&NodeletMUX<T,Filter>::input, this, _1, _2, _3, _4, _5, _6, _7, _8));
+        ts_->registerCallback (boost::bind (&NodeletMUX<T,Filter>::input, this, boost::placeholders::_1, boost::placeholders::_2, boost::placeholders::_3, boost::placeholders::_4, boost::placeholders::_5, boost::placeholders::_6, boost::placeholders::_7, boost::placeholders::_8));
       }
 
     private:
diff --git a/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_throttle.h b/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_throttle.h
index ad6785b8..018d43aa 100644
--- a/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_throttle.h
+++ b/nodelet_topic_tools/include/nodelet_topic_tools/nodelet_throttle.h
@@ -68,7 +68,7 @@ class NodeletThrottle : public nodelet::Nodelet
     ros::NodeHandle& private_nh = getPrivateNodeHandle();
 
     srv_ = new dynamic_reconfigure::Server<nodelet_topic_tools::NodeletThrottleConfig>(private_nh);
-    dynamic_reconfigure::Server<nodelet_topic_tools::NodeletThrottleConfig>::CallbackType f = boost::bind(&NodeletThrottle::reconfigure, this, _1, _2);
+    dynamic_reconfigure::Server<nodelet_topic_tools::NodeletThrottleConfig>::CallbackType f = boost::bind(&NodeletThrottle::reconfigure, this, boost::placeholders::_1, boost::placeholders::_2);
     srv_->setCallback(f);
 
     // Lazy subscription to topic
diff --git a/test_nodelet/src/create_instance_cb_error.cpp b/test_nodelet/src/create_instance_cb_error.cpp
index c722b741..97de77d2 100644
--- a/test_nodelet/src/create_instance_cb_error.cpp
+++ b/test_nodelet/src/create_instance_cb_error.cpp
@@ -33,7 +33,7 @@
 #include <nodelet/loader.h>
 #include <ros/init.h>
 
-#include <boost/bind.hpp>
+#include <boost/bind/bind.hpp>
 
 boost::shared_ptr<nodelet::Nodelet> create_instance(const std::string&)
 {
@@ -44,7 +44,7 @@ int main(int argc, char** argv)
 {
     ros::init(argc, argv, "simple_loader");
 
-    nodelet::Loader loader(boost::bind(&create_instance, _1));
+    nodelet::Loader loader(boost::bind(&create_instance, boost::placeholders::_1));
     std::map<std::string, std::string> remappings;
     std::vector<std::string> my_argv;
     if(!loader.load("/fail", "test_nodelet/FailingNodelet", remappings, my_argv))
